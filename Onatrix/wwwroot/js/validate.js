/* --------------------------------------------------------------
Lightweight client-side validator for ASP.NET / Umbraco forms
-------------------------------------------------------------- */
const validateField = (field) => {
    // Find the <span asp-validation-for="FieldName"> (generated by Razor)
    const errorSpan = document.querySelector(`span[data-valmsg-for='${field.name}']`);
    if (!errorSpan) return;

    let errorMessage = '';
    const isSelect = field.tagName.toLowerCase() === 'select';
    const isCheckbox = field.type === 'checkbox';
    const value = isSelect
        ? field.value
        : isCheckbox
            ? field.checked
            : field.value.trim();

    /* ---------- 1. Required ---------- */
    if (field.hasAttribute('data-val-required')) {
        const isEmpty = isSelect ? value === '' : isCheckbox ? !value : value === '';
        if (isEmpty) {
            errorMessage = field.getAttribute('data-val-required');
    }
}

    /* ---------- 2. Regex (email, phone, custom) ---------- */
    if (!errorMessage && field.hasAttribute('data-val-regex') && !isSelect && !isCheckbox && value !== '') {
        const pattern = new RegExp(field.getAttribute('data-val-regex-pattern'), 'i');
        if (!pattern.test(value)) {
            errorMessage = field.getAttribute('data-val-regex');
    }
}

    /* ---------- 3. EqualTo (e.g. ConfirmPassword) ---------- */
    if (!errorMessage && field.hasAttribute('data-val-equalto') && !isSelect && !isCheckbox) {
        const otherName = field.getAttribute('data-val-equalto-other').replace('*.', '');
        const otherField = document.querySelector(`[name='${otherName}']`);
        if (otherField && otherField.value !== field.value) {
            errorMessage = field.getAttribute('data-val-equalto');
    }
}

    /* ---------- 4. MinLength ---------- */
    if (!errorMessage && field.hasAttribute('data-val-minlength') && !isSelect && !isCheckbox) {
        const min = parseInt(field.getAttribute('data-val-minlength-min'), 10);
        if (value.length < min) {
            errorMessage = field.getAttribute('data-val-minlength');
    }
}

    /* ---------- 5. Number (phone can be numeric) ---------- */
    if (!errorMessage && field.hasAttribute('data-val-number') && !isSelect && !isCheckbox && value !== '') {
    if (isNaN(value.replace(/[\s\-\(\)]/g, ''))) {
        errorMessage = field.getAttribute('data-val-number');
    }
}

    /* ---------- 6. Select required (value must not be empty) ---------- */
    if (!errorMessage && isSelect && field.hasAttribute('data-val-required') && value === '') {
        errorMessage = field.getAttribute('data-val-required');
    }

    /* ---------- Show / clear error ---------- */
    if (errorMessage) {
        field.classList.add('input-validation-error');
        errorSpan.classList.remove('field-validation-valid');
        errorSpan.classList.add('field-validation-error');
        errorSpan.textContent = errorMessage;
    } else {
        field.classList.remove('input-validation-error');
        errorSpan.classList.remove('field-validation-error');
        errorSpan.classList.add('field-validation-valid');
        errorSpan.textContent = '';
    }
};

/* --------------------------------------------------------------
        Wire everything up when the DOM is ready
-------------------------------------------------------------- */
document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('#callbackForm');
    if (!form) return;

    // All inputs that have validation attributes
    const fields = form.querySelectorAll('[data-val="true"]');

    /* ---- Real-time validation ---- */
    fields.forEach(field => {
        const event = field.tagName.toLowerCase() === 'select' ? 'change'
            : field.type === 'checkbox' ? 'change'
            : 'input';
        field.addEventListener(event, () => validateField(field));
    });

    /* ---- Submit validation ---- */
    form.addEventListener('submit', e => {
        let hasErrors = false;

        fields.forEach(field => {
            validateField(field);
            if (field.classList.contains('input-validation-error')) {
                hasErrors = true;
            }
        });

        if (hasErrors) {
            e.preventDefault();               // stop submission
            // optional: scroll to first error
            const firstErr = form.querySelector('.input-validation-error');
            if (firstErr) firstErr.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    });
});